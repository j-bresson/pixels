; OM File Header - Saved 2011/10/23 1:10:58
; (6.050101 :patc (om-make-point 10 10) (om-make-point 78 184) (om-make-point 1283 652) "" 183 0 nil "2011/10/23 1:10:58")
; End File Header
(in-package :om)(load-lib-for (quote ("Pixels")))(setf *om-current-persistent* (om-load-patch1 "07-gen-pixmap" (quote ((om-load-boxcomment "comment1" (om-make-point 247 49) (quote "Variable distributions de$pending on the pixels position") "" (om-make-point 937 500) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 166 425) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 171 356) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 273 281) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 326 245) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 160 212) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 101 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 282 234) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 250 204) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 91 135) (om-make-point 69 35) nil nil nil 1) (om-load-boxin "Y" 1 (om-make-point 176 49) "no documentation" "Y" nil nil) (om-load-boxout "output" 0 (om-make-point 155 505) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "X" 0 (om-make-point 60 52) "no documentation" "X" nil nil))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (2 0 1 1 nil 0) (6 0 2 0 nil 0) (3 0 2 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (11 0 8 0 nil 0) (9 0 8 1 nil 0) (0 0 10 0 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 473 636)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 1168 215) nil nil "l" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 1129 262) (om-make-point 28 30) 40 "40" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 1082 261) (om-make-point 28 30) 60 "60" nil) (om-load-boxcall (quote genfun) "GEN-PIXMAP-XY" (quote gen-pixmap-xy) (quote ((om-load-inputfun (quote input-funbox) "width" "X" 10) (om-load-inputfun (quote input-funbox) "height" "Y" 10) (om-load-inputfun (quote input-funbox) "default value or function" "PIXFUN" nil))) (om-make-point 1093 295) nil nil nil nil 1) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 1071 381) (om-make-point 137 108) (make-instance (quote picture) :name "internal pixel array" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "internal pixel array" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 891 380) (om-make-point 137 108) (make-instance (quote picture) :name "internal pixel array" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "internal pixel array" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t) (om-load-boxcall (quote genfun) "GEN-PIXMAP-XY" (quote gen-pixmap-xy) (quote ((om-load-inputfun (quote input-funbox) "width" "X" 10) (om-load-inputfun (quote input-funbox) "height" "Y" 10) (om-load-inputfun (quote input-funbox) "default value or function" "PIXFUN" nil))) (om-make-point 913 290) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 166 425) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 171 356) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 273 281) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 326 245) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 160 212) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 107 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 282 234) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 250 204) (om-make-point 28 30) 60 "60" nil) (om-load-boxin "Y" 1 (om-make-point 214 73) "no documentation" "Y" nil nil) (om-load-boxout "output" 0 (om-make-point 155 505) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "X" 0 (om-make-point 51 71) "no documentation" "X" nil nil))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (2 0 1 1 nil 0) (6 0 2 0 nil 0) (3 0 2 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (0 0 9 0 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 475 628)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 991 219) nil nil "l" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 902 256) (om-make-point 28 30) 60 "60" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 949 257) (om-make-point 28 30) 40 "40" nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 203 182) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 143 217) (om-make-point 92 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 91 135) (om-make-point 69 35) nil nil nil 1) (om-load-boxin "Y" 1 (om-make-point 176 49) "no documentation" "Y" nil nil) (om-load-boxout "output" 0 (om-make-point 95 337) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "X" 0 (om-make-point 60 52) "no documentation" "X" nil nil))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 4 0 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 809 224) nil nil "l" nil) (om-load-boxcomment "comment" (om-make-point 335 62) (quote "GEN-PIXMAP-XY$The lambda function takes in account the position (x,y) of the pixel") "" (om-make-point 790 88) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 767 262) (om-make-point 28 30) 40 "40" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 720 261) (om-make-point 28 30) 60 "60" nil) (om-load-boxcall (quote genfun) "GEN-PIXMAP-XY" (quote gen-pixmap-xy) (quote ((om-load-inputfun (quote input-funbox) "width" "X" 10) (om-load-inputfun (quote input-funbox) "height" "Y" 10) (om-load-inputfun (quote input-funbox) "default value or function" "PIXFUN" nil))) (om-make-point 731 295) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 49 30) (quote "10 x 1") "" (om-make-point 315 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 49 30) (quote "90 x 0") "" (om-make-point 452 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 173 55) (quote "LAMBDA FUNCTION :$Randomly picks values in the list") "" (om-make-point 464 251) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 189 60) (quote "Generation of a list representing a probability distribution of 0 or 1") "" (om-make-point 483 162) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GEN-PIXMAP" (quote gen-pixmap) (quote ((om-load-inputfun (quote input-funbox) "width" "X" 10) (om-load-inputfun (quote input-funbox) "height" "Y" 10) (om-load-inputfun (quote input-funbox) "default value or function" "PIXVAL" nil))) (om-make-point 293 324) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 319 284) (om-make-point 28 30) 30 "30" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 280 284) (om-make-point 28 30) 40 "40" nil) (om-load-boxcomment "comment" (om-make-point 72 30) (quote "constant") "" (om-make-point 139 99) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 58 30) (quote "height") "" (om-make-point 82 98) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 52 30) (quote "width") "" (om-make-point 26 97) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 137 133) (om-make-point 32 30) 0.2 "0.2" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 96 134) (om-make-point 28 30) 30 "30" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 57 134) (om-make-point 28 30) 40 "40" nil) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 372 244) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 381 178) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 445 97) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 484 65) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 446 65) (om-make-point 28 30) 90 "90" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 309 69) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 346 69) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 306 99) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GEN-PIXMAP" (quote gen-pixmap) (quote ((om-load-inputfun (quote input-funbox) "width" "X" 10) (om-load-inputfun (quote input-funbox) "height" "Y" 10) (om-load-inputfun (quote input-funbox) "default value or function" "PIXVAL" nil))) (om-make-point 70 174) nil nil nil nil 1) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 709 381) (om-make-point 137 108) (make-instance (quote picture) :name "internal pixel array" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "internal pixel array" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 287 404) (om-make-point 83 88) (make-instance (quote picture) :name "internal pixel array" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "internal pixel array" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 64 253) (om-make-point 83 88) (make-instance (quote picture) :name "internal pixel array" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "internal pixel array" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 310 292))) t nil nil t) (om-load-boxcomment "comment" (om-make-point 213 51) (quote "Pixmap generation tools :$GEN-PIXMAP") "" (om-make-point 30 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((3 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (4 0 5 1 nil 0) (7 0 6 1 nil 0) (9 0 7 0 nil 0) (10 0 7 1 nil 0) (8 0 7 2 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (11 0 15 2 nil 0) (22 0 20 0 nil 0) (21 0 20 1 nil 0) (29 0 20 2 nil 0) (30 0 29 0 nil 0) (36 0 30 0 nil 0) (31 0 30 1 nil 0) (33 0 31 0 nil 0) (32 0 31 1 nil 0) (34 0 36 0 nil 0) (35 0 36 1 nil 0) (28 0 37 0 nil 0) (27 0 37 1 nil 0) (26 0 37 2 nil 0) (15 0 38 1 nil 0) (20 0 39 1 nil 0) (37 0 40 1 nil 0))) nil 6.050101))
