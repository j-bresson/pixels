; OM File Header - Saved 2011/10/23 1:10:58
; (6.050101 :patc (om-make-point 10 10) (om-make-point 673 65) (om-make-point 959 616) "" 183 0 nil "2011/10/23 1:10:57")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/image"))
(in-package :om)(load-lib-for (quote ("Pixels")))(setf *om-current-persistent* (om-load-patch1 "04-get-bitmap" (quote ((om-load-boxcomment "comment" (om-make-point 213 91) (quote "'bitmaps' are simple pixmaps where pixels are either 0 (black) or 1 (white)") "" (om-make-point 275 99) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 405 348) (om-make-point 123 133) (make-instance (quote picture) :name "image" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1164 816) (om-make-point 10 40))) t nil nil t) (om-load-boxcall (quote genfun) "GET-BITMAP" (quote get-bitmap) (quote ((om-load-inputfun (quote input-funbox) "a picture of pixmap" "PIXMAP" nil) (om-load-inputfun (quote input-funbox) "a threshold value" "SEUIL" nil))) (om-make-point 432 254) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 473 224) (om-make-point 32 30) 0.7 "0.7" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 302 224) (om-make-point 39 30) 0.32 "0.32" nil) (om-load-boxcomment "comment" (om-make-point 213 91) (quote "GET-BITMAP:$converts the pixels to gray levels (0.0 -> 1.0) then to 0 or 1 depending on the optional threshold") "" (om-make-point 545 228) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GET-BITMAP" (quote get-bitmap) (quote ((om-load-inputfun (quote input-funbox) "a picture of pixmap" "PIXMAP" nil) (om-load-inputfun (quote input-funbox) "a threshold value" "SEUIL" nil))) (om-make-point 257 254) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GET-BITMAP" (quote get-bitmap) (quote ((om-load-inputfun (quote input-funbox) "a picture of pixmap" "PIXMAP" nil))) (om-make-point 48 254) nil nil nil nil 1) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 230 349) (om-make-point 121 131) (make-instance (quote picture) :name "image" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1164 816) (om-make-point 10 40))) t nil nil t) (om-load-boxcomment "comment" (om-make-point 111 34) (quote "GET-BITMAP") "" (om-make-point 286 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 13 346) (om-make-point 135 139) (make-instance (quote picture) :name "image" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 200 229) (om-make-point 10 40))) t nil nil t) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 84 47) (om-make-point 135 139) (make-instance (quote picture) :name "image" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 310 292) (om-make-point 10 40))) t nil nil t))) (quote ((2 0 1 0 nil 0) (11 0 2 0 nil 0) (3 0 2 1 nil 0) (11 0 6 0 nil 0) (4 0 6 1 nil 0) (11 0 7 0 nil 0) (6 0 8 0 nil 0) (7 0 10 0 nil 0))) nil 6.050101))
