; OM File Header - Saved 2011/10/23 1:10:58
; (6.050101 :patc (om-make-point 10 10) (om-make-point 841 152) (om-make-point 783 699) "" 183 0 nil "2011/10/23 1:10:57")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/image"))
(in-package :om)(load-lib-for (quote ("Pixels")))(setf *om-current-persistent* (om-load-patch1 "03-size-resolution" (quote ((om-load-boxcomment "comment 2" (om-make-point 511 62) (quote "Right-click and use the contexual menu of the picture box in order to choose whether or not you wish to save the pixel values in the patch (large picture may consume time and disk space if stored in the patch).") "" (om-make-point 64 577) nil (om-make-color 0.52046806 0.38441038 0.37212315) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 375 348) (om-make-point 74 82) (make-instance (quote picture) :name "internal pixel array" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "internal pixel array" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1164 816) (om-make-point 10 40))) t nil nil t) (om-load-boxcall (quote genfun) "PICTURE-SIZE" (quote picture-size) (quote ((om-load-inputfun (quote input-funbox) "a picture object" "SELF" nil))) (om-make-point 354 444) nil nil nil nil 2) (om-load-boxcall (quote genfun) "PICTURE-SIZE" (quote picture-size) (quote ((om-load-inputfun (quote input-funbox) "a picture object" "SELF" nil))) (om-make-point 169 465) nil nil nil nil 2) (om-load-boxcomment "comment" (om-make-point 227 55) (quote "SCALE-PIXMAP$up- or downsample the pixel array") "" (om-make-point 461 244) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SCALE-PIXMAP" (quote scale-pixmap) (quote ((om-load-inputfun (quote input-funbox) "a picture or RGB pixmap" "PIXMAP" nil) (om-load-inputfun (quote input-funbox) "a multiplicative factor (integer)" "FACT" 1))) (om-make-point 371 252) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 423 222) (om-make-point 26 30) -4 "-4" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 269 247) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "SCALE-PIXMAP" (quote scale-pixmap) (quote ((om-load-inputfun (quote input-funbox) "a picture or RGB pixmap" "PIXMAP" nil) (om-load-inputfun (quote input-funbox) "a multiplicative factor (integer)" "FACT" 1))) (om-make-point 217 277) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 139 30) (quote "picture width / height") "" (om-make-point 22 299) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "PICTURE-SIZE" (quote picture-size) (quote ((om-load-inputfun (quote input-funbox) "a picture object" "SELF" nil))) (om-make-point 59 225) nil nil nil nil 2) (om-load-boxcomment "comment" (om-make-point 279 34) (quote "Pixmaps dimension / resolution") "" (om-make-point 177 20) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 190 370) (om-make-point 74 82) (make-instance (quote picture) :name "internal pixel array" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "internal pixel array" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 200 229) (om-make-point 10 40))) t nil nil t) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 213 68) (om-make-point 135 139) (make-instance (quote picture) :name "image" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 310 292) (om-make-point 10 40))) t nil nil t))) (quote ((5 0 1 1 nil 0) (1 0 2 0 nil 0) (12 0 3 0 nil 0) (13 0 5 0 nil 0) (6 0 5 1 nil 0) (13 0 8 0 nil 0) (7 0 8 1 nil 0) (13 0 10 0 nil 0) (8 0 12 1 nil 0))) nil 6.050101))
