; OM File Header - Saved 2011/10/23 1:10:58
; (6.050101 :patc (om-make-point 10 10) (om-make-point 343 7) (om-make-point 1165 646) "" 183 0 nil "2011/10/23 1:10:58")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/image"))
(in-package :om)(load-lib-for (quote ("Pixels")))(setf *om-current-persistent* (om-load-patch1 "06-map-pixels" (quote ((om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 140 204) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 147 236) (om-make-point 53 35) nil nil nil 1) (om-load-boxcall (quote genfun) "PIX->BIT" (quote pix->bit) (quote ((om-load-inputfun (quote input-funbox) "a pixel value" "PIXEL" nil))) (om-make-point 191 142) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 86 45) (quote "0 becomes 1$1 becomes 0") "" (om-make-point 213 223) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 172 30) (quote "OUTPUT = modified pixel") "" (om-make-point 103 358) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 190 30) (quote "INPUT = 1 pixel (R G B alpha)") "" (om-make-point 195 59) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxin "PIXEL" 0 (om-make-point 137 42) "no documentation" "PIXEL" nil nil) (om-load-boxout "output" 0 (om-make-point 151 295) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "PIXEL" nil))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (6 0 2 0 nil 0) (1 0 7 0 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 647 232) nil nil "l" nil) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 798 394) (om-make-point 137 108) (make-instance (quote picture) :name "image" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 310 292) (om-make-point 10 40))) t nil nil t) (om-load-boxcall (quote genfun) "MAP-PIXELS1" (quote map-pixels) (quote ((om-load-inputfun (quote input-funbox) "a picture or RGB pixmap" "SELF" nil) (om-load-inputfun (quote input-funbox) "a function to apply to each pixel" "FUNCTION" nil))) (om-make-point 819 307) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 199 235) (om-make-point 21 31) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-MAX" (quote om-max) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 169 265) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 141 75) (quote "Here:$R = constant (0.5)$G x 2$B = R") "" (om-make-point 306 299) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 196 176) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 162 206) (om-make-point 56 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 96 280) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-boxcall (quote genfun) "PIX-ALPHA" (quote pix-alpha) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PIXEL" nil))) (om-make-point 366 118) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PIX-B" (quote pix-b) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PIXEL" nil))) (om-make-point 282 120) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PIX-G" (quote pix-g) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PIXEL" nil))) (om-make-point 165 118) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PIX-R" (quote pix-r) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PIXEL" nil))) (om-make-point 81 119) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 91 337) (om-make-point 163 59) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 190 30) (quote "OUTPUT = modified pixel") "" (om-make-point 207 411) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 190 30) (quote "INPUT = 1 pixel (R G B alpha)") "" (om-make-point 197 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxin "PIXEL" 0 (om-make-point 133 38) "no documentation" "PIXEL" nil nil) (om-load-boxout "output" 0 (om-make-point 151 400) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "PIXEL" nil))) (quote ((4 0 1 0 nil 3) (0 0 1 1 nil 0) (8 0 4 0 nil 3) (3 0 4 1 nil 0) (13 0 6 0 nil 0) (13 0 7 0 nil 0) (13 0 8 0 nil 0) (13 0 9 0 nil 0) (5 0 10 0 nil 2) (1 0 10 1 nil 3) (9 0 10 2 ((om-make-point 97 176) (om-make-point 97 242) (om-make-point 123 243) (om-make-point 190 337)) 1) (6 0 10 3 nil 10) (10 0 14 0 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 601 536)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 869 236) nil nil "l" nil) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 560 391) (om-make-point 137 108) (make-instance (quote picture) :name "image" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 310 292) (om-make-point 10 40))) t nil nil t) (om-load-boxcall (quote genfun) "MAP-PIXELS1" (quote map-pixels) (quote ((om-load-inputfun (quote input-funbox) "a picture or RGB pixmap" "SELF" nil) (om-load-inputfun (quote input-funbox) "a function to apply to each pixel" "FUNCTION" nil))) (om-make-point 594 307) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 212 49) (quote "program you own patch for specific pixel processing") "" (om-make-point 669 170) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 106 64) (quote "converts a pixel to gray level (0.0 - 1.0)") "" (om-make-point 452 248) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "PIX->NB" (quote pix->nb) (quote ((om-load-inputfun (quote input-funbox) "a pixel value" "PIXEL" nil))) (om-make-point 397 241) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "MAP-PIXELS1" (quote map-pixels) (quote ((om-load-inputfun (quote input-funbox) "a picture or RGB pixmap" "SELF" nil) (om-load-inputfun (quote input-funbox) "a function to apply to each pixel" "FUNCTION" nil))) (om-make-point 346 309) nil nil nil nil 1) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 359 391) (om-make-point 83 88) (make-instance (quote picture) :name "image" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 310 292) (om-make-point 10 40))) t nil nil t) (om-load-boxcomment "comment" (om-make-point 186 45) (quote "map-pixel + pix->bit $= équivalent to get-bitmap") "" (om-make-point 0 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 118 381) (om-make-point 83 88) (make-instance (quote picture) :name "image" :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote nil)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 310 292) (om-make-point 10 40))) t nil nil t) (om-load-boxcall (quote genfun) "PIX->BIT" (quote pix->bit) (quote ((om-load-inputfun (quote input-funbox) "a pixel value" "PIXEL" nil))) (om-make-point 184 235) nil nil "l" nil 1) (om-load-boxcomment "comment" (om-make-point 444 30) (quote "MAP-PIXELS works like 'MAPCAR' for PICTURES and pixel arrays") "" (om-make-point 373 109) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "MAP-PIXELS1" (quote map-pixels) (quote ((om-load-inputfun (quote input-funbox) "a picture or RGB pixmap" "SELF" nil) (om-load-inputfun (quote input-funbox) "a function to apply to each pixel" "FUNCTION" nil))) (om-make-point 105 308) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 551 34) (quote "MAP-PIXELS : apply functions to every pixels") "" (om-make-point 199 16) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "BACKGROUND" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "GRAPHICS" nil))) (om-make-point 217 98) (om-make-point 83 88) (make-instance (quote picture) :name "image" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "image" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 310 292) (om-make-point 10 40))) t nil nil t))) (quote ((2 0 1 0 nil 0) (17 0 2 0 nil 0) (3 0 2 1 nil 0) (5 0 4 0 nil 0) (17 0 5 0 nil 0) (0 0 5 1 nil 0) (17 0 9 0 nil 0) (8 0 9 1 nil 0) (9 0 10 0 nil 0) (15 0 12 0 nil 0) (17 0 15 0 nil 0) (13 0 15 1 nil 0))) nil 6.050101))
